There are two types of arithmetic operators. These are (i) binary operator and (ii) unary operator.

As shown in Figure 3.1, the unary and binary operators are defined in the following section and the ternary operator is described in Section 3.4. The conditional operator is 
nothing but the ternary operator.

1. Binary Operator:  These operators are commonly used in most of the computer languages. These arithmetic operators are used for numerical calculations between the two constant 
                  values. They are also called Binary Arithmetic Operators. Binary operators are those operators which require two operands. The examples are also given in Table 3.3.
                  In the program, variables are declared instead of constants.
                  
                  C evaluates arithmetic operations as follows.

                  a) Division, multiplication and remainder operations are solved first. When an expression contains many operators such as multiplication, division and modular 
                     division operations, expression evaluation starts from left to right. Multiplication, division and modular division operators are having equal level of precedence.

                  b) The addition and subtraction operations are solved after division, multiplication and modular division operations. Evaluation starts from left to right.
                     Addition and subtraction have equal level of precedence.

2. Unary Operators: The operators which require only one operand are called unary operators. Unary operators are increment operator (++), decrement (--) and minus (-). 


1. Minus (-): Unary minus is used for indicating or changing the algebraic sign of a value.
              Example:

              int x=-50;
    
              int y=-x;

              assign the value of -50 to x and the value of -50 to y through x. The minus (-) sign used in this way is called the unary operator because it takes just 
              one operand. There is no unary plus (+) in C. Even though, a value assigned with plus sign is valid, for example int x=+50, here, + is valid, but in 
              practice this sign should not be attached in C.

2. Increment (++) and Decrement (--) Operators: The C compilers produce very fast and efficient object codes for increment and decrement operations. This code is better 
                                                than generated by using the equivalent assignment statement. So, increment and decrement operators should be used whenever
                                                possible.
                                                The operator ++ adds one to its operand, whereas the operator -- subtracts one from its operand. For justification, x=x+1 
                                                can be written as x++; and x=x-1; can be written as x--;. Both these operators may either follow or precede the operand. 
                                                That is x=x+1; can be represented as x++; or ++x;

                                                If ‘++’ or ‘--’ are used as a suffix to the variable name, then post-increment/decrement operations take place. Consider 
                                                an example for understanding the ‘++’ operator as a suffix to the variable.

                                                x=20;

                                                y=10;

                                                z=x*y++;

                                                In the above equation, the current value of y is used for the product. The result is 200, which is assigned to ‘z’. 
                                                After multiplication the value of y is incremented by one.

                                                If ‘++’ or ‘--’ are used as a prefix to the variable name, then pre increment/decrement operations take place. 
                                                Consider an example for understanding ‘++’ operator as a prefix to the variable.

                                                x=20;

                                                y=10;

                                                z=x*++y;

                                                In the above equation, the value of y is incremented and then multiplication is carried out. The result is 220, 
                                                which is assigned to ‘z’. 


EXAMPLE CODE
-------------

void main()

{

int a,z,x=10,y=20;

clrscr();

z=x*y++;

a=x*y;

printf(“\n%d %d”,z,a);

}

DO YOU WANT TO RUN THIS PROGRAM ?
PRESS 1 FOR YES OR 0 FOR A NO...
